编程和章13语言文字whiteMocca/Shutterstock白莫卡/沙特尔斯托克第317页我为什么要读这一章？
设计糟糕的软件一眨眼就摧毁了公司。
从股票购买到起搏器，我们的生活越来越依赖在数字设备和运行它们的程序上。
未来，机器人凭借先进的人工智能，你将用会话英语为这些机器人编程指示亚历山大超级流浪汉/Shutterstock本章介绍了您需要知道的准备事项这个不断变化的数字世界，包括：软件开发生命周期了解软件的步骤为协助或管理软件开发而准备的开发项目。
编程语言理解汇编之间的差异，程序语言和自然语言，以选择最适合您的语言需要。
学习目标阅读本章后，您应该能够：1.定义编程并描述编程。
2.比较设计工具，伪代码、流程图和逻辑结构。
3.描述程序测试以及查找和删除错误。
4.描述CASE工具和面向对象软件发展5.解释五代编程语言。
第318页介绍“嗨，我是爱丽丝，我是一名计算机程序员。
我很想与您讨论编程和编程语言。
”在上一章中，我们讨论了系统分析和设计。
我们讨论了六阶段系统生命周期方法改进信息系统。
阶段之一是系统开发，或者获取新的硬件和软件。
本章涉及这一阶段是系统开发。
更具体地说，本章侧重于开发新软件或编程。
我们将在两部分：（1）编程过程中的步骤和（2）编程语言可用。
图像产品/Shutterstock为什么你需要了解编程？
答案是易于理解的你可能需要与程序员打交道工作您还可能需要在将来最终用户软件开发是一个日益增长的趋势。
这意味着最终用户（如您）正在开发自己的应用程序程序。
要高效有效地使用计算机，您需要了解系统开发和编程之间的关系。
此外，您需要了解编程的六个步骤，包括程序规范、程序设计、程序代码、程序测试、程序文档和程序维护。
程序和编程编程到底是什么？
许多人认为它是只需在电脑上输入单词。
这可能是其中的一部分，但这当然不是全部这实际上是一个解决问题的过程。
什么是计划？
要了解编程是如何工作的，请思考程序是什么。
程序是计算机执行以下操作的指令列表完成将数据处理为信息说明由使用的语句组成使用编程语言，如C++、Java或Python。
您已经熟悉某些类型的程序。
像我们在第1章和第3章中讨论了应用程序广泛用于完成各种不同类型的任务。
例如，我们使用文字处理器创建用于分析数据的文档和电子表格。
这些可以是购买并称为预先编写或包装程序。
程序也可以创建或定制。
在里面第12章，我们看到系统分析师研究了Advantage的时间和计费软件可用性广告是否可以使用现成的软件，或者它应该是定制的吗？
这是第一件事这需要在编程中决定。
什么是编程？
程序是计算机执行以下操作的指令列表遵循以处理数据。
编程，也称为软件开发，通常遵循六个步骤，即软件开发生命周期（SDLC）。
（见图13-1.)第319页图13-1软件开发六个步骤如下：程序规范：程序的目标、输出、，确定输入和处理要求。
程序设计：使用编程创建解决方案诸如自顶向下的程序设计、伪代码等技术，流程图和逻辑结构。
。
程序代码：程序使用编程语言。
。
程序测试：通过查看语法和逻辑错误。
程序文档：文档是一个持续的过程在整个编程过程中。
这一阶段的重点是将书面描述和过程正式化程序。
.程序维护：定期完成程序审查以评估其准确性、效率，标准化和易用性。
对程序的代码。
在组织中，计算机专业人员称为软件工程师或程序员使用这个六步程序。
在一个Money杂志最近的一项调查显示，软件工程师在100多个广泛持有的职位中排名靠前薪水、声望和安全。
您可能会发现自己直接与程序员或通过系统分析员间接地。
或者你实际上可以为您发展不管是什么情况，重要的是了解六步编程程序。
概念检查什么是程序？
六个编程步骤是什么？
第320页步骤1：程序规范程序规范也称为程序定义或程序分析。
它要求程序员或你，如果您正在执行此过程，请指定最终用户五个项目：（1）项目目标，（2）期望的输出，（3）所需的输入数据，（4）处理以及（5）文件。
（见图13-2。
）图13-2步骤1：程序规范项目目标你每天都在解决各种各样的问题。
问题可能是决定如何通勤上学或上班或做哪些家庭作业或报告先做。
因此，每天你都会决定目标你试图解决的问题。
编程是相同的。
你需要对您正在尝试解决的问题。
例如“我想要记录我花费时间的时间和计费系统Advantage不同客户的不同工作广告。
”期望的输出最好总是在输入之前指定输出。
即，你需要列出你想从计算机中得到什么系统然后，您应该确定将进入其中的内容最好的方法是画一幅画。
您是最终用户，程序员不应该绘制或写下你想要的输出以在完成时查看。
它可能被打印出来或显示在监视器上。
例如，如果您需要时间和计费报告可能会编写或绘制类似图13-3的内容。
另一种形式程序的输出可能是给客户的账单。
图13-3最终用户所需输出的示意图描述输入数据一旦知道所需的输出，就可以确定输入数据和该数据的来源。
例如，对于时间和计费报告，您可以指定要处理的数据应该是时间卡。
这些通常是提交的工作时间日志或报表，第321页电子形式或纸质形式。
日志显示在图13-4是Advantage Advertising的手动系统。
注意，军方使用时间。
例如，不要写“5:45.”下午人们会写“1745”图13-4工作时间输入数据示例，用军事时间表示描述处理要求这里定义了必须执行的处理任务待处理成输出的输入数据。
对于Advantage该计划的任务是增加工作时间不同客户的不同作业。
项目规范文件在系统生命周期中，持续的文档本质的您应该根据需要记录计划目标输出、所需输入和所需处理。
这导致了下一步是程序设计。
概念检查什么是程序规范？
描述第一个程序、计划目标。
为什么要确定输入之前的输出？
讨论处理要求和程序规范文件第322页步骤2：程序设计在程序规范之后，开始程序设计。
（参见图13-5）在这里，您计划一个解决方案，最好使用结构化编程技术。
这些技术包括（1）自上而下的程序设计，（2）伪代码、（3）流程图和（4）逻辑结构。
图13-5步骤2：程序设计自上而下的程序设计首先确定程序的输出和输入。
然后使用自上而下的程序设计来确定程序的处理步骤。
这些步骤称为程序模块（或仅模块）。
每个模块由逻辑相关的程序语句。
一个自上而下的程序设计示例-账单报告如图13-6所示。
每个盒子示出了一个模块。
在自上而下的设计规则下模块应具有单个功能。
程序必须通过依次从一个模块到下一个模块，直到所有模块已由计算机处理。
三个盒子-“获取输入”“计算计费小时数”，以及“生产输出”-对应于三个原则计算机系统操作：输入、处理和输出。
图13-6自上而下程序设计示例描述第323页伪码伪码（发音为“soo-doh code”）是您将编写的程序的逻辑。
这就像在做编写程序前的概要。
图13-7显示了可能为中的一个模块编写的伪代码时间和计费程序。
这说明了背后的原因确定工时，包括加班时间一个客户的不同作业，客户A。
再次注意表达您希望程序执行的逻辑。
图13-7伪代码示例描述流程图我们在上一章中提到了系统流程图。
在这里我们关注的是程序流程图。
这些图形化给出解决问题所需的详细步骤顺序编程问题。
图13-8显示了几个标准流程图符号。
程序示例流程图如图13-9所示。
本流程图只表示一个模块的所有逻辑—“计算时间”在客户端A作业上”-在自顶向下的程序设计中。
图13-8流程图符号也许你可以从这个流程图中看出为什么计算机是一台计算机，而不仅仅是一台加法机。
其中之一计算机的强大能力是逻辑比较。
例如，计算机可以比较两个项，以确定是否小于、大于或等于其他项目。
第324页图13-9“计算客户端A作业的时间”流程图描述第325页但我们跳过了什么吗？
我们怎么知道哪种在流程图中加入曲折逻辑工作？
答案是基于逻辑的使用正如我们将要解释的那样。
逻辑结构如何链接流程图的各个部分？
最好的方式是三种逻辑结构的组合，称为顺序、选择和重复。
使用这些安排使您能够编写结构化程序从编程中省去很多猜测。
让我们看看逻辑结构。
在顺序结构中，以下是一个程序语句另一个例如，考虑“计算时间”流程图。
（请参阅图13-9。
）添加常规工时添加到总正常工时，并将加班工时添加到总工时加班时间形成一个连续的结构。
他们逻辑上彼此跟随。
不存在“是”或“否”或暗示其他后果的决定。
（参见图13-10）当决策必须…制造的决定的结果决定了两项中的哪一项要遵循的路径。
（见图13-11）该结构也是被称为IF-THEN-ELSE结构，因为这就是可以制定决策。
例如，考虑“计算时间”流程图中的选择结构，它关注计算加班时间（工作超过1700？
）。
（请参阅图13-9。
）具体表示如下：如果此作业的完成时间晚于1700小时（5:00），则加班时间等于小时数下午过去1700小时，ELSE加班时间等于零。
（见图13-11。
）重复或循环结构描述了一个过程只要某个条件仍然存在，可以重复真的。
该结构称为“循环”或“迭代”因为程序循环（迭代或重复）一次又一次。
考虑与测试相关的“计算时间”流程图如果有更多的工作（客户有更多工作？
）。
它可能具体表述如下：务必在WHILE（即，只要）中读取作业信息还有更多的工作。
（见图13-12。
）图13-10顺序逻辑结构图13-11选择（IF-THEN-ELSE）逻辑结构描述图13-12重复逻辑结构描述离开程序设计之前要做的最后一件事步骤是记录设计的逻辑。
本报告通常包括伪代码、流程图和逻辑结构。
现在，您已准备好下一步，计划密码概念检查定义程序设计步骤的目标。
讨论自上而下的程序设计、伪代码、流程图和逻辑结构。
描述三种逻辑结构。
第326页步骤3：程序代码编写程序称为编码。
这里您使用逻辑您在程序设计步骤中开发了程序。
（见图13-13）这是“程序代码”它指示计算机做什么人们一想到编程就会想到。
正如我们但指出，这只是编程过程。
图13-13步骤3：程序代码好的计划一个好的计划有哪些品质？
最重要的是应该是可靠的，也就是说，它应该在大多数情况下工作并产生正确的输出。
它应该能抓住明显和常见的输入错误。
它也应该很好除了毕竟，有人可能需要未来计划的变化。
最好的方法之一代码有效的程序是编写所谓的结构化程序程序，使用步骤2中描述的逻辑结构：程序设计。
编码制定程序逻辑后，下一步是使用适当的计算机对程序进行编码或编写语言编程语言使用符号的集合，指示计算机执行的单词和短语具体操作。
编程语言处理数据和各种不同类型的应用。
图13-14显示了编程代码使用广泛使用的编程语言C++来计算计算时间模块。
对于C++和一些其他广泛使用的编程语言，见图13-15。
图13-14用于计算常规和超时的C++代码小时等pp.org语言描述C++扩展C以使用对象或程序模块可以在程序之间重用和交换C#由Microsoft设计的编程语言扩展C++以开发Windows环境Java主要用于Internet应用程序；类似于C++；运行各种操作系统JavaScript嵌入到网页中，提供动态和交互式内容Python通用编程语言简单易学。
常用于编程入门课程Swift使用图形用户界面和特殊代码用于创建应用程序的触摸屏界面苹果iOS设备图13-15广泛使用的编程语言一旦程序被编码，或调试程序。
第327页概念检查什么是编码？
什么是一个好程序？
什么是编程语言？
第328页步骤4：程序测试调试是指测试过程，然后消除错误（“清除错误”）。
（见图13-16.）这意味着在计算机上运行程序，然后固定不工作的部件。
编程错误为两种类型：语法错误和逻辑错误。
图13-16步骤4：程序测试描述语法错误语法错误违反了编程规则语言例如，在C++中，每条语句必须以分号（；）。
如果省略分号，则程序由于语法错误，将不会运行或执行。
例如图13-17显示了计算时间模块在识别出语法错误。
图13-17识别的语法错误苹果股份有限公司。
逻辑错误当程序员使用不正确的计算或省略编程过程。
对于例如，一个不计算加班的工资程序小时将出现逻辑错误。
测试过程已经设计了几种方法来查找和删除两种类型的错误，包括桌面检查，手动测试、翻译、运行和测试。
桌面检查：在桌面检查或代码审查中坐在桌前的程序员检查（校对）打印件该计划的一部分。
程序员查看列表逐行仔细查找语法错误和逻辑错误。
使用样本数据手动测试：使用第329页计算器和样本数据，程序员遵循每个程序语句并执行每个计算。
寻找编程逻辑错误，程序员将手动计算的值与计算的值进行比较通过程序。
尝试翻译：程序通过计算机，使用翻译程序。
译者尝试从将语言（如C++）编程到机器中语言在程序运行之前，它必须没有语法错误。
此类错误将由翻译程序。
（见图13-17。
）在计算机上测试示例数据：毕竟语法错误已被纠正，程序已进行逻辑测试错误。
样本数据用于测试正确的执行每个程序语句。
由选定的一组潜在用户进行测试：这是有时称为beta测试。
这通常是最后一步在测试程序时。
潜在用户试用该程序并提供反馈。
有关步骤4：程序测试的摘要，请参见图13-18。
任务描述1语法和逻辑桌面检查错误。
2使用样本数据手动测试。
3翻译程序以识别语法错误。
4使用样本数据运行程序。
5测试潜在用户。
图13-18步骤4：程序测试过程概念检查什么是调试？
语法错误和逻辑错误之间的区别是什么？
简要描述测试过程。
第330页步骤5：程序文档文件包括书面说明和程序关于一个程序以及如何使用它。
（见图13-19）而不是在编程结束时做的事情过程项目文件编制贯穿所有项目编程步骤。
在此步骤中对文件进行审查、定稿和分发。
文档对可能参与其中的人员很重要在未来的计划中。
这些人可能包括以下内容：用户。
用户需要知道如何使用软件。
一些组织可以提供培训课程来指导用户通过程序。
但是，其他组织可能期望用户能够仅从书面文件。
这类的两个例子文档是打印的手册和帮助选项在大多数应用中。
操作员。
必须为计算机提供文档操作员。
如果程序向他们发送错误消息例如，他们需要知道如何处理他们。
程序员。
随着时间的流逝原始程序可能不记得太多。
其他希望更新和修改它的程序员，执行程序维护可能会感到沮丧没有足够的文件。
这类文件应包括文本和程序流程图、程序列表和示例输出。
它还可能包括系统显示特定程序与信息系统中的其他程序。
图13-19步骤5：程序文档概念检查什么是文档？
程序文档何时发生？
谁受文档影响？
第331页步骤6：程序维护最后一步是程序维护。
（见图13-20。
）高达整个生命周期成本的75%应用程序用于维护。
此活动是如此一个特殊的职位，维护程序员，存在。
图13-20步骤6：程序维护程序维护的目的是确保当前程序运行无错误、高效且有效地这一领域的活动分为两类类别：操作和不断变化的需求。
操作运营活动涉及定位和纠正操作错误，使程序更易于使用，以及使用结构化编程实现软件标准化技术。
对于正确设计的程序，这些活动应该是最小的。
编程修改或修正通常称为补丁。
对于获取的软件软件制造商通常定期发送其软件的补丁或更新。
如果补丁是重要的是，它们被称为软件更新。
不断变化的需求所有组织都会随着时间的推移而变化，其计划必须与他们一起改变。
程序需要根据各种情况进行调整原因，包括新的税法、新的信息需求，以及新的公司政策。
可能需要进行重大修订整个编程过程从程序开始规格理想情况下，软件项目按顺序遵循以下六项软件开发的步骤。
然而，一些项目开始在知道所有要求之前。
在这些情况下，SDLC变成一个更具周期性的过程，重复几次在整个软件开发过程中。
例如敏捷开发，一个流行的开发页面332方法论，从获得核心功能开始然后对其进行扩展，直到客户对结果感到满意。
所有六个步骤都是尽可能快地反复进行逐步增加应用程序的功能版本。
图13-21总结了编程的六个步骤过程步骤主要活动1.项目规范确定项目目标，期望的输出、所需的输入，以及加工要求。
2.程序设计使用结构化编程技术。
3.程序代码选择编程语言；写程序。
4.程序测试执行桌面检查（代码审查）以及手动检查；企图翻译使用样本测试数据β电位测试用户。
5.程序文档用户编写程序，操作员和程序员。
6.程序维护调整错误、低效或无效操作，非标准代码和更改时间图13-21编程六个步骤汇总概念检查程序维护的目的是什么？
讨论运营活动。
什么是补丁？
软件更新？
什么是不断变化的需求，它们如何影响计划？
CASE和OOP你到处都听说效率和生产力。
他们对于软件开发尤其重要。
二承诺提供帮助的资源是CASE工具和对象-面向软件开发。
CASE工具专业程序员一直在寻找方法使他们的工作更容易、更快、更可靠。
一个工具我们在第12章CASE中提到的是满足这一需求。
计算机辅助软件工程（CASE）工具提供在程序设计、编码和测试。
（见图13-22。
）第333页图13-22 Sparx Systems提供CASE工具Enterprise建筑师Smartdraw软件有限责任公司。
面向对象软件开发传统系统开发是一个谨慎、循序渐进的过程侧重于完成某些目标。
面向对象的软件开发较少关注程序，更多关注定义先前定义的程序之间的关系或面向对象编程（OOP）是一个过程程序被组织成对象。
每个对象包含必要的数据和处理操作执行任务。
让我们来解释一下这意味着什么。
在过去，程序是作为巨型实体开发的，从第一行代码到最后一行。
这是与从头开始制造汽车相比。
面向对象的编程就像用预制件制造汽车-化油器、交流发电机、挡泥板等。
面向对象程序使用可重用、自包含的对象组件。
使用这些对象构建的程序假定某些功能是相同的。
例如，从电子表格到数据库管理员，都有指导这将按字母顺序对姓名列表进行排序。
A.程序员可以使用此对象按字母顺序排列其他程序。
没有必要重新发明这种活动每一次。
C++是使用最广泛的对象之一-面向编程语言。
概念检查什么是CASE工具？
什么是面向对象软件开发？
什么是面向对象编程？
第334页几代编程语言文字计算机专业人士谈论编程语言，从“低”到“高”编程语言在更接近计算机本身使用的语言。
计算机理解构成位和字节的0和1。
编程语言在更接近人类使用的语言，即英语说英语的人，更喜欢英语。
有五代编程语言：（1）机器语言，（2）汇编语言，（3）过程语言语言，（4）面向任务的语言，（5）问题和约束语言。
机器语言：第一代我们在第5章中提到，字节是由位组成的，由1和0组成。
这些1和0可以对应于计算机中的电源开或关。
他们也可以对应于存在或不存在于诸如盘或磁带的存储介质。
从这两个国家系统、编码方案已经开发出来构造字母、数字、标点符号和其他特殊字符。
这些编码方案的示例，如我们saw是ASCII、EBCDIC和Unicode。
以1和0表示的数据被称为写入机器语言。
要知道这是多么难以理解，想象一下，如果你必须这样编码：机器语言也因计算机的型号而异-另一个让他们难以相处的特点。
汇编语言：第二代在计算机能够处理或运行任何程序之前必须转换或翻译成机器语言。
汇编语言使用缩写或助记符，如ADD自动转换为适当的序列1和0。
与机器语言相比，汇编语言对人类来说更容易理解和理解使用我们上面给出的机器语言代码可能是用汇编语言表示为当然，这仍然很模糊，因此组装语言也被认为是低级的。
汇编语言也因计算机而异。
随着第三代的发展，我们向高水平迈进语言，其中许多被认为是可移植语言。
也就是说，它们可以在多种计算机上运行-它们是从一台机器到另一台机器的“便携式”。
高级程序语言：第三代人们能够理解更像他们自己的（例如英语）而不是机器语言或汇编语言。
这些更像英语的编程语言被称为“高级”语言。
然而，大多数人仍然需要一些培训才能使用高级语言。
这是尤其是程序语言。
过程语言，也称为3GL（第三-生成语言），旨在表达逻辑-可以解决一般问题的程序。
第335页因此，程序语言旨在解决和是最广泛使用的语言创建软件应用程序。
C++是一种过程语言被当今程序员广泛使用。
例如，C++是用于Advantage Advertising的时间和计费报告。
（请再次参见图13-14，了解此的计算时间模块程序。
）考虑以下程序的C++语句根据考试成绩分配字母成绩：此语句测试分数是否大于或等于90。
如果是，那么A的字母等级为分配。
与汇编语言一样，过程语言必须翻译成机器语言，使计算机处理它们。
根据语言，此翻译由编译器或解释器执行。
编译器转换程序员的过程语言程序（称为源代码）转换为机器语言代码，称为目标代码。
该目标代码可以是保存并稍后运行。
C++的标准版本是使用编译器的过程语言。
口译员将程序语言转换为语句一次转换为机器代码执行。
未保存对象代码。
一个使用口译员的程序语言是标准BASIC版本。
使用编译器和使用翻译？
当程序运行时，编译器需要两个步骤。
第一步是转换整个程序的源代码到目标代码。
第二步是运行目标代码。
相反，解释器转换并运行程序一次一行。
编译器的优点语言是，一旦获得了目标代码程序执行速度更快。
口译员的优势语言就是程序更容易开发。
面向任务的语言：第四代第三代语言很有价值，但它们需要编程培训。
面向任务的语言，也称为作为4GL（第四代语言）和非常高级别语言方面使用者与通用语言不同，面向任务的语言旨在解决特定问题。
而3GL专注于程序以及如何结合逻辑来解决各种问题在问题中，4GL是非过程性的，专注于指定程序要完成的特定任务。
4GL是更像英语，更容易编程，并被广泛使用非程序员。
这些第四代语言中的一些是用于非常特定的应用。
例如，IFPS（交互式财务计划系统）用于开发财务模型。
许多4GL是数据库管理的一部分系统4GL包括查询语言和应用程序发电机：查询语言：查询语言使非程序员能够使用某些易于理解的命令来搜索和从数据库生成报告。
最广泛的使用的查询语言是SQL（结构化查询语言）。
例如，我们假设Advantage Advertising具有包含所有客户服务请求的数据库其管理层希望列出所有产生的加班费。
创建此的SQL命令列表为此SQL语句选择或标识所有客户端（dailyLog表中的字段名）17日之后（军事时间5:00）。
Microsoft Access可以下午通过使用其Query生成类似这样的SQL命令男巫应用程序生成器：应用程序生成器页面336或者程序编码器是提供预先编写的代码模块。
使用应用程序时生成器，程序员可以通过引用执行某些任务的模块。
这大大减少了创建应用程序的时间。
对于例如，Access具有报表生成应用程序和报告向导，用于创建各种不同类型的报告使用数据库信息。
问题与约束语言：第五代随着它们世代进化，计算机语言变得更加人性化。
显然，第四个-使用包含单词的命令生成查询语言像SELECT、FROM和WHERE比机器语言的0和1。
然而，4GL仍然很长远离英语和西班牙语等自然语言人们使用的。
编程语言的下一步将是第五步-生成语言（5GL）或计算机语言结合人工智能的概念为系统提供问题和然后请求解决方案。
此外，这些语言将使计算机能够学习和应用新的而不是通过键入来编码特定命令，我们将更直接地与使用自然语言的计算机。
考虑以下自然语言语句：可能出现在5GL计划中，用于推荐医疗治疗：第五代语言何时成为现实？
这很难说；然而，研究人员正在积极致力于5GL语言的开发展示了一些成功。
参见图13-23，了解编程语言。
生成示例语句第一个：11110010011100111101001000010000011110000000101011机器第二：添加210（8,13），02B（4,7）装配第三：如果（得分>=90）等级=“A”；程序第四：从日常日志中选择客户机WHERE服务结束>任务17第五：从患者症状中获取患者诊断问题“打喷嚏”、“咳嗽”、“疼痛”和约束条件图13-23五代编程概述概念检查低级语言与高级语言的区别语言机器语言和汇编语言有什么区别？

